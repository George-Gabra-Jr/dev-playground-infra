# name: pipelines

services:
  registry:
    container_name: registry
    image: registry:2
    restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 1
      placement: 
        constraints: 
          - node.role == manager
        max_replicas_per_node: 1
      restart_policy:
        condition: any
    ports:
      - 127.0.0.1:5000:5000
    volumes:
      - registry_data:/var/lib/registry
    networks:
      cicd:
        aliases:
          - registry

  jenkins:
    container_name: jenkins
    image: jenkinswithdockercli:latest
    restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 1
      placement: 
        constraints: 
          - node.role == manager
        max_replicas_per_node: 1
      restart_policy:
        condition: any
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      cicd:
        aliases:
          - jenkins
      ingress-net:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jenkins.rule=Host(`jenkins.dev-playground.net`)"
      - "traefik.http.routers.jenkins.middlewares=default-middlewares@file"
      - "traefik.http.services.jenkins.loadbalancer.server.port=8080"
      - "traefik.docker.network=ingress-net"


  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 1
      placement: 
        constraints: 
          - node.role == manager
        max_replicas_per_node: 1
      restart_policy:
        condition: any
    volumes:
      - portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      ingress-net:
      cicd:
        aliases:
          - portainer

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.dev-playground.net`)"
      - "traefik.http.routers.portainer.middlewares=default-middlewares@file"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      - "traefik.docker.network=ingress-net"

  sonarqube-db:
    container_name: sonarqube-db
    image: postgres:15
    restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 1
      placement: 
        constraints: 
          - node.role == manager
        max_replicas_per_node: 1
      restart_policy:
        condition: any
    volumes:
      - sonarqube_db:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
    networks:
      cicd:
        aliases:
          - sonarqube-db

  sonarqube:
    container_name: sonarqube
    image: sonarqube:community
    restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 1
      placement: 
        constraints: 
          - node.role == manager
        max_replicas_per_node: 1
      restart_policy:
        condition: any
    volumes:
      - sonarqube_data:/opt/sonarqube/
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonarqube-db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    networks:
      ingress-net:
      cicd:
        aliases:
          - sonarqube
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarqube.rule=Host(`sonarqube.dev-playground.net`)"
      - "traefik.http.routers.sonarqube.middlewares=default-middlewares@file"
      - "traefik.http.services.sonarqube.loadbalancer.server.port=9000"
      - "traefik.docker.network=ingress-net"
    depends_on:
      - sonarqube-db

networks:
  cicd:
    external: true
  ingress-net:
    external: true

volumes:
  registry_data:
  jenkins_home:
  portainer_data:
  sonarqube_data:
  sonarqube_db:
